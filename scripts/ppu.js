
const colors = [
    [0x7F, 0x7F, 0x7F, 0xFF], [0x20, 0x00, 0xB0, 0xFF], [0x28, 0x00, 0xB8, 0xFF], [0x60, 0x10, 0xA0, 0xFF],
    [0x98, 0x20, 0x78, 0xFF], [0xB0, 0x10, 0x30, 0xFF], [0xA0, 0x30, 0x00, 0xFF], [0x78, 0x40, 0x00, 0xFF],
    [0x48, 0x58, 0x00, 0xFF], [0x38, 0x68, 0x00, 0xFF], [0x38, 0x6C, 0x00, 0xFF], [0x30, 0x60, 0x40, 0xFF],
    [0x30, 0x50, 0x80, 0xFF], [0x00, 0x00, 0x00, 0xFF], [0x00, 0x00, 0x00, 0xFF], [0x00, 0x00, 0x00, 0xFF],

    [0xBC, 0xBC, 0xBC, 0xFF], [0x40, 0x60, 0xF8, 0xFF], [0x40, 0x40, 0xFF, 0xFF], [0x90, 0x40, 0xF0, 0xFF],
    [0xD8, 0x40, 0xC0, 0xFF], [0xD8, 0x40, 0x60, 0xFF], [0xE0, 0x50, 0x00, 0xFF], [0xC0, 0x70, 0x00, 0xFF],
    [0x88, 0x88, 0x00, 0xFF], [0x50, 0xA0, 0x00, 0xFF], [0x48, 0xA8, 0x10, 0xFF], [0x48, 0xA0, 0x68, 0xFF],
    [0x40, 0x90, 0xC0, 0xFF], [0x00, 0x00, 0x00, 0xFF], [0x00, 0x00, 0x00, 0xFF], [0x00, 0x00, 0x00, 0xFF],

    [0xFF, 0xFF, 0xFF, 0xFF], [0x60, 0xA0, 0xFF, 0xFF], [0x50, 0x80, 0xFF, 0xFF], [0xA0, 0x70, 0xFF, 0xFF],
    [0xF0, 0x60, 0xFF, 0xFF], [0xFF, 0x60, 0xB0, 0xFF], [0xFF, 0x78, 0x30, 0xFF], [0xFF, 0xA0, 0x00, 0xFF],
    [0xE8, 0xD0, 0x20, 0xFF], [0x98, 0xE8, 0x00, 0xFF], [0x70, 0xF0, 0x40, 0xFF], [0x70, 0xE0, 0x90, 0xFF],
    [0x60, 0xD0, 0xE0, 0xFF], [0x60, 0x60, 0x60, 0xFF], [0x00, 0x00, 0x00, 0xFF], [0x00, 0x00, 0x00, 0xFF],

    [0xFF, 0xFF, 0xFF, 0xFF], [0x90, 0xD0, 0xFF, 0xFF], [0xA0, 0xB8, 0xFF, 0xFF], [0xC0, 0xB0, 0xFF, 0xFF],
    [0xE0, 0xB0, 0xFF, 0xFF], [0xFF, 0xB8, 0xE8, 0xFF], [0xFF, 0xC8, 0xB8, 0xFF], [0xFF, 0xD8, 0xA0, 0xFF],
    [0xFF, 0xF0, 0x90, 0xFF], [0xC8, 0xF0, 0x80, 0xFF], [0xA0, 0xF0, 0xA0, 0xFF], [0xA0, 0xFF, 0xC8, 0xFF],
    [0xA0, 0xFF, 0xF0, 0xFF], [0xA0, 0xA0, 0xA0, 0xFF], [0x00, 0x00, 0x00, 0xFF], [0x00, 0x00, 0x00, 0xFF]
]


// $2000
const VRAM_ADDR_INCR = 0x04 
const SP_PATTERN_TABLE = 0x08
const BG_PATTERN_TABLE = 0x10
const GEN_NMI_IN_VBLANK = 0x80
// $2002
const VBLANK_START = 0x80

class PPU {
    constructor(addrSpace, ppuReg) {
        this.addrSpace = addrSpace // a.k.a vram
        this.ppuReg = ppuReg
        this.ppuReg.regChangedCallbacks = [null, null, null, null, null, null, this.ppuAddrSet, this.ppuDataSet]

        // pointer from ppuAddr
        this.vramPointer
        this.ppuAddrStep = 0

        this.bufferedByte
    }

    // alias for ppuReg
    get ppuCtrl() { return this.ppuReg.innerBytes[0] }
    set ppuCtrl(byte) { this.ppuReg.innerBytes[0] = byte }

    get ppuMask() { return this.ppuReg.innerBytes[1] }
    set ppuMask(byte) { this.ppuReg.innerBytes[1] = byte }

    get ppuStatus() { return this.ppuReg.innerBytes[2] }
    set ppuStatus(byte) { this.ppuReg.innerBytes[2] = byte }

    get oamAddr() { return this.ppuReg.innerBytes[3] }
    set oamAddr(byte) { this.ppuReg.innerBytes[3] = byte }

    get oamData() { return this.ppuReg.innerBytes[4] }
    set oamData(byte) { this.ppuReg.innerBytes[4] = byte }

    get ppuScroll() { return this.ppuReg.innerBytes[5] }
    set ppuScroll(byte) { this.ppuReg.innerBytes[5] = byte }

    get ppuAddr() { return this.ppuReg.innerBytes[6] }
    set ppuAddr(byte) { this.ppuReg.innerBytes[6] = byte }

    get ppuData() { return this.ppuReg.innerBytes[7] }
    set ppuData(byte) { this.ppuReg.innerBytes[7] = byte }

    /*Todo: OAMDMA*/

    // callbacks when ppuReg changed
    ppuAddrSet(byte) {
        if (this.ppuAddrStep == 0) {
            // 6 higher bits
            this.vramPointer = (byte & 0x003f) << 8
            this.ppuAddrStep++
        } else {
            // 8 lower bits
            this.vramPointer |= byte
            this.ppuAddrStep = 0
            // write to ppuReg
            // buffer mechanism
            if (this.vramPointer < 0x3f00) {
                this.ppuData = this.bufferedByte  // only get last buffered data
                this.bufferedByte = this.addrSpace.read(this.vramPointer)
            } else {
                // immediate update for palette data
                this.bufferedByte = this.addrSpace.read(this.vramPointer)
                this.ppuData = this.addrSpace.read(this.vramPointer)  
            }
        }
    }

    ppuDataSet(byte) {
        // write to addrSpace
        this.addrSpace.write(this.ppuAddrbyte, byte)
        // increase ppuAddr
        this.vramPointer += (this.ppuCtrl & VRAM_ADDR_INCR ? 32 : 1)  
    }

    // other methods
}